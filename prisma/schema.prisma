generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://postgres:Access@123@122.165.217.145:5433/dev"
}

model Tenant {
  id                   Int                   @id @default(autoincrement())
  tenantId             String                @unique
  tenantName           String
  description          String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deletedAt            DateTime?
  createdBy            String
  organizations        Organization[]
  organizationLicenses OrganizationLicense[]
  users                User[]
}

model User {
  id             Int           @id @default(autoincrement())
  userId         String        @unique
  email          String        @unique
  licenseId      Int?
  organizationId Int?
  tenantId       Int
  createdAt      DateTime      @default(now())
  createdBy      String
  deletedAt      DateTime?
  updatedAt      DateTime      @updatedAt
  emailVerified  Boolean       @default(false)
  otp            Int?
  otpExpiry      DateTime?
  subscriptionId Int?
  username       String?
  roleUsers      RoleUser[]
  license        License?      @relation(fields: [licenseId], references: [id])
  organization   Organization? @relation(fields: [organizationId], references: [id])
  tenant         Tenant        @relation(fields: [tenantId], references: [id])
}

model Organization {
  id                   Int                   @id @default(autoincrement())
  tenantId             Int
  organizationId       String                @unique
  orgId                String
  name                 String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deletedAt            DateTime?
  createdBy            String
  parent               String?
  tenant               Tenant                @relation(fields: [tenantId], references: [id])
  organizationLicenses OrganizationLicense[]
  payments             Payment[]
  subscriptions        Subscription[]
  users                User[]
}

model OrganizationLicense {
  id                Int          @id @default(autoincrement())
  tenantId          Int
  organizationId    Int
  licenseId         Int
  numberOfLicenses  Int
  availableLicenses Int
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  deletedAt         DateTime?
  createdBy         String
  period            String?
  license           License      @relation(fields: [licenseId], references: [id])
  organization      Organization @relation(fields: [organizationId], references: [id])
  tenant            Tenant       @relation(fields: [tenantId], references: [id])
}

model License {
  id                   Int                   @id @default(autoincrement())
  name                 String
  description          String?
  monthlyCost          Float
  yearlyCost           Float
  createdAt            DateTime              @default(now())
  createdBy            String
  deletedAt            DateTime?
  updatedAt            DateTime              @updatedAt
  organizationLicenses OrganizationLicense[]
  permissions          PlanPermission[]
  subscriptions        Subscription[]
  users                User[]
}

model PlanPermission {
  id           Int        @id @default(autoincrement())
  permissionId Int
  licenseId    Int
  createdAt    DateTime   @default(now())
  createdBy    String
  deletedAt    DateTime?
  updatedAt    DateTime   @updatedAt
  license      License    @relation(fields: [licenseId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
}

model Subscription {
  id                    Int          @id @default(autoincrement())
  status                String
  endDate               DateTime?
  licenseId             Int
  organizationId        Int
  startDate             DateTime
  tenantId              Int
  createdAt             DateTime     @default(now())
  createdBy             String
  deletedAt             DateTime?
  updatedAt             DateTime     @updatedAt
  organizationLicenseId Int?
  payments              Payment[]
  license               License      @relation(fields: [licenseId], references: [id])
  organization          Organization @relation(fields: [organizationId], references: [id])
}

model Payment {
  id             Int          @id @default(autoincrement())
  paymentDate    DateTime
  amount         Float
  organizationId Int
  paymentMethod  String
  status         String
  subscriptionId Int
  transactionId  String?
  tenantId       Int
  createdAt      DateTime     @default(now())
  createdBy      String
  deletedAt      DateTime?
  updatedAt      DateTime     @updatedAt
  tax_amount     Float?
  tax_id         Int?
  organization   Organization @relation(fields: [organizationId], references: [id])
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
}

model Role {
  id              Int              @id @default(autoincrement())
  roleName        String
  roleSlug        String
  ehrRoleId       String?
  ehrRoleName     String?
  createdAt       DateTime?        @default(now())
  createdBy       String?
  deletedAt       DateTime?
  tenantId        Int?
  updatedAt       DateTime?        @updatedAt
  licenseId       Int?
  rolePermissions RolePermission[]
  roleUsers       RoleUser[]
  widgetRoles     WidgetRole[]
}

model RoleUser {
  id     Int  @id @default(autoincrement())
  roleId Int
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  user   User @relation(fields: [userId], references: [id])
}

model Permission {
  id                Int              @id @default(autoincrement())
  permissionName    String
  permissionSlug    String
  ehrPermissionId   String?
  ehrPermissionSlug String?
  permissionDatas   PermissionData[]
  planPermissions   PlanPermission[]
  rolePermissions   RolePermission[]
  widgets           Widget[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  createdAt    DateTime?  @default(now())
  createdBy    String?
  deletedAt    DateTime?
  tenantId     Int?
  updatedAt    DateTime?  @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])
}

model LicenseHistory {
  id             Int       @id @default(autoincrement())
  userId         String
  organizationId Int
  licenseId      Int
  subscriptionId Int
  assignedAt     DateTime?
  unassignedAt   DateTime?
  createdBy      String
  tenantId       Int
}

model Settings {
  id        Int       @id @default(autoincrement())
  name      String
  value     Json
  createdBy String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  slug      String
  tenant    String
}

model PaymentHistory {
  id            Int       @id @default(autoincrement())
  paymentDate   DateTime
  amount        Float
  paymentMethod String
  status        String
  transactionId String
  tenantId      Int
  createdAt     DateTime  @default(now())
  createdBy     String
  deletedAt     DateTime?
  updatedAt     DateTime  @updatedAt
  subscriptions Json
}

model Tax {
  id         Int       @id @default(autoincrement())
  name       String
  createdAt  DateTime  @default(now())
  createdBy  String
  deletedAt  DateTime?
  updatedAt  DateTime  @updatedAt
  percentage Float
}

model RenewHistory {
  id               Int       @id @default(autoincrement())
  paymentDate      DateTime
  startDate        DateTime
  endDate          DateTime
  paymentHistoryId Int
  status           String
  subscriptionId   Int
  transactionId    String
  tenantId         Int
  createdAt        DateTime  @default(now())
  createdBy        String
  deletedAt        DateTime?
  updatedAt        DateTime  @updatedAt
}

model TenantTemp {
  id                 Int                @id @default(autoincrement())
  organizationName   String
  organizationType   String
  organizationCode   String
  address            String
  city               String
  district           String
  state              String
  country            String
  postal_code        String
  organization_phone String
  organization_email String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  deletedAt          DateTime?
  createdBy          String
  isPaid             Boolean
  subscriptions      SubscriptionTemp[]
  users              UserTemp[]
}

model UserTemp {
  id                 Int        @id @default(autoincrement())
  isPaid             Boolean
  status             Boolean
  email              String     @unique
  first_name         String
  last_name          String
  password           String
  password_temporary Boolean
  tenantId           Int
  createdAt          DateTime   @default(now())
  createdBy          String
  deletedAt          DateTime?
  updatedAt          DateTime   @updatedAt
  emailVerified      Boolean    @default(false)
  otp                Int?
  otpExpiry          DateTime?
  username           String?
  tenant             TenantTemp @relation(fields: [tenantId], references: [id])
}

model SubscriptionTemp {
  id        Int        @id @default(autoincrement())
  isPaid    Boolean
  plans     Json
  tenantId  Int
  createdAt DateTime   @default(now())
  createdBy String
  deletedAt DateTime?
  updatedAt DateTime   @updatedAt
  tenant    TenantTemp @relation(fields: [tenantId], references: [id])
}

model Widget {
  id               Int          @id @default(autoincrement())
  name             String
  slug             String
  permissionId     Int
  icon             String?
  text_color       String?
  border_color     String?
  fill             Boolean?
  type             String[]
  background_color String[]
  permission       Permission   @relation(fields: [permissionId], references: [id])
  widgetRoles      WidgetRole[]
}

model WidgetRole {
  id        Int       @id @default(autoincrement())
  widgetId  Int
  roleId    Int
  createdAt DateTime? @default(now())
  createdBy String?
  deletedAt DateTime?
  tenantId  Int?
  updatedAt DateTime? @updatedAt
  type      String?
  role      Role      @relation(fields: [roleId], references: [id])
  widget    Widget    @relation(fields: [widgetId], references: [id])
}

model Term {
  id             Int       @id @default(autoincrement())
  term           String
  preferred_term String
  createdAt      DateTime? @default(now())
  createdBy      String?
  deletedAt      DateTime?
  tenantId       Int?
  enabled        Boolean
}

model PermissionData {
  id             Int        @id @default(autoincrement())
  permissionName String
  permissionSlug String
  permissionId   Int
  permission     Permission @relation(fields: [permissionId], references: [id])
}

model Service {
  id                Int       @id @default(autoincrement())
  service_id        String
  practitioner_id   String?
  practitioner_name String?
  tax_id            Int
  createdAt         DateTime  @default(now())
  createdBy         String
  deletedAt         DateTime?
  tenantId          Int
  rate              Float
  tax_rate          Int
  service_name      String
  discount          Int?
  discount_type     String?
}

model Package {
  id                  Int       @id @default(autoincrement())
  package_name        String
  tax_id              Int
  services            Json
  additional_services Json?
  createdAt           DateTime  @default(now())
  createdBy           String
  deletedAt           DateTime?
  tenantId            Int
  duration            String
  rate                Float
  tax_rate            Int
  discount            Int?
  discount_type       String?
  final_amount        Float?
}

model PatientIdentifier {
  id         Int       @id @default(autoincrement())
  patient_id String
  createdAt  DateTime  @default(now())
  createdBy  String
  deletedAt  DateTime?
  tenantId   Int
  unique_id  String
}

model Room {
  id              Int        @id @default(autoincrement())
  location_id     String     @unique
  room_name       String
  parent_id       String?
  description     String?
  room_category   String
  room_number     String
  physical_type   String
  no_of_beds      Int
  bed_rate        Float
  status          String
  tenant_id       Int
  organization_id String
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  deleted_at      DateTime?
  created_by      String
  resources       Resource[]
}

model Resource {
  id              Int       @id @default(autoincrement())
  location_id     String    @unique
  resource_name   String    @unique
  room_id         String
  description     String?
  physical_type   String
  status          String
  tenant_id       Int
  organization_id String
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?
  created_by      String
  room            Room      @relation(fields: [room_id], references: [location_id])
}

model Booking {
  id              Int       @id @default(autoincrement())
  room_id         String
  bed_id          String
  ipd_no          String
  patient_id      String
  practitioner    String[]
  days            Int
  check_in        DateTime
  check_out       DateTime?
  status          String
  tenant_id       Int
  organization_id String
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?
  created_by      String
}

model Admission {
  id              Int       @id @default(autoincrement())
  encounter_id    String
  patient_id      String
  mrn_no          String
  ehr_id          String
  admission       Boolean
  tenant_id       Int
  organization_id String
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?
  created_by      String
}